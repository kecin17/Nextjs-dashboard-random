{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\u061717\\\\Documents\\\\Next\\\\dashboard-master\\\\components\\\\widgets\\\\jira\\\\issue-count.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { object, string, number } from 'yup';\nimport Widget from '../../widget';\nimport Counter from '../../counter';\nimport { basicAuthHeader } from '../../../lib/auth';\nconst schema = object().shape({\n  url: string().url().required(),\n  query: string().required(),\n  interval: number(),\n  title: string(),\n  authKey: string()\n});\nexport default class JiraIssueCount extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0,\n      error: false,\n      loading: true\n    });\n  }\n\n  componentDidMount() {\n    schema.validate(this.props).then(() => this.fetchInformation()).catch(err => {\n      console.error(`${err.name} @ ${this.constructor.name}`, err.errors);\n      this.setState({\n        error: true,\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  async fetchInformation() {\n    const {\n      authKey,\n      url,\n      query\n    } = this.props;\n    const opts = authKey ? {\n      headers: basicAuthHeader(authKey)\n    } : {};\n\n    try {\n      const res = await fetch(`${url}/rest/api/2/search?jql=${query}`, opts);\n      const json = await res.json();\n      this.setState({\n        count: json.total,\n        error: false,\n        loading: false\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval);\n    }\n  }\n\n  render() {\n    const {\n      count,\n      error,\n      loading\n    } = this.state;\n    const {\n      title\n    } = this.props;\n    return __jsx(Widget, {\n      title: title,\n      loading: loading,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, __jsx(Counter, {\n      value: count,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(JiraIssueCount, \"defaultProps\", {\n  interval: 1000 * 60 * 5,\n  title: 'JIRA Issue Count'\n});","map":{"version":3,"sources":["C:/Users/u061717/Documents/Next/dashboard-master/components/widgets/jira/issue-count.js"],"names":["Component","fetch","object","string","number","Widget","Counter","basicAuthHeader","schema","shape","url","required","query","interval","title","authKey","JiraIssueCount","count","error","loading","componentDidMount","validate","props","then","fetchInformation","catch","err","console","name","constructor","errors","setState","componentWillUnmount","clearTimeout","timeout","opts","headers","res","json","total","setTimeout","render","state"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport { object, string, number } from 'yup'\nimport Widget from '../../widget'\nimport Counter from '../../counter'\nimport { basicAuthHeader } from '../../../lib/auth'\n\nconst schema = object().shape({\n  url: string().url().required(),\n  query: string().required(),\n  interval: number(),\n  title: string(),\n  authKey: string()\n})\n\nexport default class JiraIssueCount extends Component {\n  static defaultProps = {\n    interval: 1000 * 60 * 5,\n    title: 'JIRA Issue Count'\n  }\n\n  state = {\n    count: 0,\n    error: false,\n    loading: true\n  }\n\n  componentDidMount () {\n    schema.validate(this.props)\n      .then(() => this.fetchInformation())\n      .catch((err) => {\n        console.error(`${err.name} @ ${this.constructor.name}`, err.errors)\n        this.setState({ error: true, loading: false })\n      })\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this.timeout)\n  }\n\n  async fetchInformation () {\n    const { authKey, url, query } = this.props\n    const opts = authKey ? { headers: basicAuthHeader(authKey) } : {}\n\n    try {\n      const res = await fetch(`${url}/rest/api/2/search?jql=${query}`, opts)\n      const json = await res.json()\n\n      this.setState({ count: json.total, error: false, loading: false })\n    } catch (error) {\n      this.setState({ error: true, loading: false })\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval)\n    }\n  }\n\n  render () {\n    const { count, error, loading } = this.state\n    const { title } = this.props\n    return (\n      <Widget title={title} loading={loading} error={error}>\n        <Counter value={count} />\n      </Widget>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}