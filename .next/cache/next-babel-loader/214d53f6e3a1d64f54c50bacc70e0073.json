{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\u061717\\\\Documents\\\\Next\\\\dashboard-master\\\\components\\\\widgets\\\\sonarqube\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport styled from 'styled-components';\nimport fetch from 'isomorphic-unfetch';\nimport { object, string, number } from 'yup';\nimport Widget from '../../widget';\nimport Table, { Th, Td } from '../../table';\nimport Badge from '../../badge';\nimport { basicAuthHeader } from '../../../lib/auth';\n\nconst alertColor = ({\n  theme,\n  children\n}) => {\n  switch (children) {\n    case 'ERROR':\n      return theme.palette.errorColor;\n\n    case 'WARN':\n      return theme.palette.warnColor;\n\n    default:\n      // OK\n      return theme.palette.successColor;\n  }\n};\n\nconst Alert = styled.span.withConfig({\n  displayName: \"sonarqube__Alert\",\n  componentId: \"sc-1guu1e-0\"\n})([\"color:\", \";\"], alertColor);\n\nconst sonarBadgeColor = ({\n  theme,\n  children\n}) => {\n  switch (children) {\n    case 'A':\n      return theme.palette.successColor;\n\n    case 'B':\n      return theme.palette.successSecondaryColor;\n\n    case 'C':\n      return theme.palette.warnColor;\n\n    case 'D':\n      return theme.palette.warnSecondaryColor;\n\n    case 'E':\n      return theme.palette.errorColor;\n\n    default:\n      return 'transparent';\n  }\n};\n\nconst SonarBadge = styled(Badge).withConfig({\n  displayName: \"sonarqube__SonarBadge\",\n  componentId: \"sc-1guu1e-1\"\n})([\"background-color:\", \";\"], sonarBadgeColor);\nconst schema = object().shape({\n  url: string().url().required(),\n  componentKey: string().required(),\n  interval: number(),\n  title: string(),\n  authKey: string()\n});\nexport default class SonarQube extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      measures: [],\n      loading: true,\n      error: false\n    });\n\n    _defineProperty(this, \"getMetricValue\", (measures, metricKey) => {\n      const result = measures.filter(measure => measure.metric === metricKey);\n      return result.length ? result[0].value : '';\n    });\n\n    _defineProperty(this, \"getRatingValue\", (measures, metricKey) => {\n      const value = this.getMetricValue(measures, metricKey);\n\n      switch (value) {\n        case '1.0':\n          return 'A';\n\n        case '2.0':\n          return 'B';\n\n        case '3.0':\n          return 'C';\n\n        case '4.0':\n          return 'D';\n\n        case '5.0':\n          return 'E';\n      }\n\n      return '?';\n    });\n  }\n\n  componentDidMount() {\n    schema.validate(this.props).then(() => this.fetchInformation()).catch(err => {\n      console.error(`${err.name} @ ${this.constructor.name}`, err.errors);\n      this.setState({\n        error: true,\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  async fetchInformation() {\n    const {\n      authKey,\n      url,\n      componentKey\n    } = this.props;\n    const opts = authKey ? {\n      headers: basicAuthHeader(authKey)\n    } : {}; // https://docs.sonarqube.org/display/SONAR/Metric+Definitions\n\n    const metricKeys = ['alert_status', 'reliability_rating', 'bugs', 'security_rating', 'vulnerabilities', 'sqale_rating', 'code_smells', 'coverage', 'duplicated_lines_density'].join(',');\n\n    try {\n      const res = await fetch(`${url}/api/measures/component?componentKey=${componentKey}&metricKeys=${metricKeys}`, opts);\n      const json = await res.json();\n      this.setState({\n        error: false,\n        loading: false,\n        measures: json.component.measures\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval);\n    }\n  }\n\n  render() {\n    const {\n      error,\n      loading,\n      measures\n    } = this.state;\n    const {\n      title\n    } = this.props;\n    const alertStatus = this.getMetricValue(measures, 'alert_status');\n    const reliabilityRating = this.getRatingValue(measures, 'reliability_rating');\n    const bugs = this.getMetricValue(measures, 'bugs');\n    const securityRating = this.getRatingValue(measures, 'security_rating');\n    const vulnerabilities = this.getMetricValue(measures, 'vulnerabilities');\n    const sqaleRating = this.getRatingValue(measures, 'sqale_rating');\n    const codeSmells = this.getMetricValue(measures, 'code_smells');\n    const coverage = this.getMetricValue(measures, 'coverage');\n    const duplicatedLinesDensity = this.getMetricValue(measures, 'duplicated_lines_density');\n    return __jsx(Widget, {\n      title: title,\n      loading: loading,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, __jsx(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, \"Quality Gate:\"), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, __jsx(Alert, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 19\n      }\n    }, alertStatus))), __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, \"Reliability:\"), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, __jsx(SonarBadge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, reliabilityRating), \" \", __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 62\n      }\n    }, \"(\", bugs, \")\"))), __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }, \"Security:\"), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, __jsx(SonarBadge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, securityRating), \" \", __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 59\n      }\n    }, \"(\", vulnerabilities, \")\"))), __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, \"Maintainability:\"), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, __jsx(SonarBadge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, sqaleRating), \" \", __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 56\n      }\n    }, \"(\", codeSmells, \")\"))), __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, \"Coverage:\"), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, coverage, \"%\")), __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }, \"Duplications:\"), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, duplicatedLinesDensity, \"%\")))));\n  }\n\n}\n\n_defineProperty(SonarQube, \"defaultProps\", {\n  interval: 1000 * 60 * 5,\n  title: 'SonarQube'\n});","map":{"version":3,"sources":["C:/Users/u061717/Documents/Next/dashboard-master/components/widgets/sonarqube/index.js"],"names":["Component","styled","fetch","object","string","number","Widget","Table","Th","Td","Badge","basicAuthHeader","alertColor","theme","children","palette","errorColor","warnColor","successColor","Alert","span","sonarBadgeColor","successSecondaryColor","warnSecondaryColor","SonarBadge","schema","shape","url","required","componentKey","interval","title","authKey","SonarQube","measures","loading","error","metricKey","result","filter","measure","metric","length","value","getMetricValue","componentDidMount","validate","props","then","fetchInformation","catch","err","console","name","constructor","errors","setState","componentWillUnmount","clearTimeout","timeout","opts","headers","metricKeys","join","res","json","component","setTimeout","render","state","alertStatus","reliabilityRating","getRatingValue","bugs","securityRating","vulnerabilities","sqaleRating","codeSmells","coverage","duplicatedLinesDensity"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport styled from 'styled-components'\nimport fetch from 'isomorphic-unfetch'\nimport { object, string, number } from 'yup'\nimport Widget from '../../widget'\nimport Table, { Th, Td } from '../../table'\nimport Badge from '../../badge'\nimport { basicAuthHeader } from '../../../lib/auth'\n\nconst alertColor = ({ theme, children }) => {\n  switch (children) {\n    case 'ERROR':\n      return theme.palette.errorColor\n    case 'WARN':\n      return theme.palette.warnColor\n    default: // OK\n      return theme.palette.successColor\n  }\n}\nconst Alert = styled.span`\n  color: ${alertColor};\n`\n\nconst sonarBadgeColor = ({ theme, children }) => {\n  switch (children) {\n    case 'A':\n      return theme.palette.successColor\n    case 'B':\n      return theme.palette.successSecondaryColor\n    case 'C':\n      return theme.palette.warnColor\n    case 'D':\n      return theme.palette.warnSecondaryColor\n    case 'E':\n      return theme.palette.errorColor\n    default:\n      return 'transparent'\n  }\n}\nconst SonarBadge = styled(Badge)`\n  background-color: ${sonarBadgeColor};\n`\n\nconst schema = object().shape({\n  url: string().url().required(),\n  componentKey: string().required(),\n  interval: number(),\n  title: string(),\n  authKey: string()\n})\n\nexport default class SonarQube extends Component {\n  static defaultProps = {\n    interval: 1000 * 60 * 5,\n    title: 'SonarQube'\n  }\n\n  state = {\n    measures: [],\n    loading: true,\n    error: false\n  }\n\n  componentDidMount () {\n    schema.validate(this.props)\n      .then(() => this.fetchInformation())\n      .catch((err) => {\n        console.error(`${err.name} @ ${this.constructor.name}`, err.errors)\n        this.setState({ error: true, loading: false })\n      })\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this.timeout)\n  }\n\n  async fetchInformation () {\n    const { authKey, url, componentKey } = this.props\n    const opts = authKey ? { headers: basicAuthHeader(authKey) } : {}\n\n    // https://docs.sonarqube.org/display/SONAR/Metric+Definitions\n    const metricKeys = [\n      'alert_status', 'reliability_rating', 'bugs', 'security_rating',\n      'vulnerabilities', 'sqale_rating', 'code_smells', 'coverage',\n      'duplicated_lines_density'\n    ].join(',')\n\n    try {\n      const res = await fetch(`${url}/api/measures/component?componentKey=${componentKey}&metricKeys=${metricKeys}`, opts)\n      const json = await res.json()\n\n      this.setState({ error: false, loading: false, measures: json.component.measures })\n    } catch (error) {\n      this.setState({ error: true, loading: false })\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval)\n    }\n  }\n\n  getMetricValue = (measures, metricKey) => {\n    const result = measures.filter(measure => measure.metric === metricKey)\n    return result.length ? result[0].value : ''\n  }\n\n  getRatingValue = (measures, metricKey) => {\n    const value = this.getMetricValue(measures, metricKey)\n\n    switch (value) {\n      case '1.0':\n        return 'A'\n      case '2.0':\n        return 'B'\n      case '3.0':\n        return 'C'\n      case '4.0':\n        return 'D'\n      case '5.0':\n        return 'E'\n    }\n\n    return '?'\n  }\n\n  render () {\n    const { error, loading, measures } = this.state\n    const { title } = this.props\n\n    const alertStatus = this.getMetricValue(measures, 'alert_status')\n    const reliabilityRating = this.getRatingValue(measures, 'reliability_rating')\n    const bugs = this.getMetricValue(measures, 'bugs')\n    const securityRating = this.getRatingValue(measures, 'security_rating')\n    const vulnerabilities = this.getMetricValue(measures, 'vulnerabilities')\n    const sqaleRating = this.getRatingValue(measures, 'sqale_rating')\n    const codeSmells = this.getMetricValue(measures, 'code_smells')\n    const coverage = this.getMetricValue(measures, 'coverage')\n    const duplicatedLinesDensity = this.getMetricValue(measures, 'duplicated_lines_density')\n\n    return (\n      <Widget title={title} loading={loading} error={error}>\n        <Table>\n          <tbody>\n            <tr>\n              <Th>Quality Gate:</Th>\n              <Td><Alert>{alertStatus}</Alert></Td>\n            </tr>\n\n            <tr>\n              <Th>Reliability:</Th>\n              <Td>\n                <SonarBadge>{reliabilityRating}</SonarBadge> <small>({bugs})</small>\n              </Td>\n            </tr>\n\n            <tr>\n              <Th>Security:</Th>\n              <Td>\n                <SonarBadge>{securityRating}</SonarBadge> <small>({vulnerabilities})</small>\n              </Td>\n            </tr>\n\n            <tr>\n              <Th>Maintainability:</Th>\n              <Td>\n                <SonarBadge>{sqaleRating}</SonarBadge> <small>({codeSmells})</small>\n              </Td>\n            </tr>\n\n            <tr>\n              <Th>Coverage:</Th>\n              <Td>{coverage}%</Td>\n            </tr>\n\n            <tr>\n              <Th>Duplications:</Th>\n              <Td>{duplicatedLinesDensity}%</Td>\n            </tr>\n          </tbody>\n        </Table>\n      </Widget>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}