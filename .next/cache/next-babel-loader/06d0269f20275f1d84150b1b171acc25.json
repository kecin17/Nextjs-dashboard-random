{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\u061717\\\\Documents\\\\Next\\\\dashboard-master\\\\components\\\\widgets\\\\jenkins\\\\job-status.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport styled from 'styled-components';\nimport { object, string, array, number } from 'yup';\nimport Widget from '../../widget';\nimport Table, { Th, Td } from '../../table';\nimport Badge from '../../badge';\nimport LoadingIndicator from '../../loading-indicator';\nimport { basicAuthHeader } from '../../../lib/auth';\n\nconst jenkinsBadgeColor = ({\n  theme,\n  status\n}) => {\n  switch (status) {\n    case 'FAILURE':\n      return theme.palette.errorColor;\n\n    case 'UNSTABLE':\n      return theme.palette.warnColor;\n\n    case 'SUCCESS':\n      return theme.palette.successColor;\n\n    case 'ABORTED':\n    case 'NOT_BUILT':\n      return theme.palette.disabledColor;\n\n    default:\n      // null = 'In Progress'\n      return 'transparent';\n  }\n};\n\nconst JenkinsBadge = styled(Badge).withConfig({\n  displayName: \"job-status__JenkinsBadge\",\n  componentId: \"sc-b0n22b-0\"\n})([\"background-color:\", \";\"], jenkinsBadgeColor);\nconst schema = object().shape({\n  url: string().url().required(),\n  jobs: array(object({\n    label: string().required(),\n    path: string().required(),\n    branch: string()\n  })).required(),\n  interval: number(),\n  title: string(),\n  authKey: string()\n});\nexport default class JenkinsJobStatus extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: true,\n      error: false\n    });\n  }\n\n  componentDidMount() {\n    schema.validate(this.props).then(() => this.fetchInformation()).catch(err => {\n      console.error(`${err.name} @ ${this.constructor.name}`, err.errors);\n      this.setState({\n        error: true,\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  async fetchInformation() {\n    const {\n      authKey,\n      jobs,\n      url\n    } = this.props;\n    const opts = authKey ? {\n      headers: basicAuthHeader(authKey)\n    } : {};\n\n    try {\n      const builds = await Promise.all(jobs.map(async job => {\n        const branch = job.branch ? `job/${job.branch}/` : '';\n        const res = await fetch(`${url}/job/${job.path}/${branch}lastBuild/api/json`, opts);\n        const json = await res.json();\n        return {\n          name: job.label,\n          url: json.url,\n          result: json.result\n        };\n      }));\n      this.setState({\n        error: false,\n        loading: false,\n        builds\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval);\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      builds\n    } = this.state;\n    const {\n      title\n    } = this.props;\n    return __jsx(Widget, {\n      title: title,\n      error: error,\n      loading: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, __jsx(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, builds && builds.map(build => __jsx(\"tr\", {\n      key: `jenkins-${build.name}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, __jsx(Th, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, build.name), __jsx(Td, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      href: build.url,\n      title: build.result,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, build.result ? __jsx(JenkinsBadge, {\n      status: build.result,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 27\n      }\n    }) : __jsx(LoadingIndicator, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 27\n      }\n    }))))))));\n  }\n\n}\n\n_defineProperty(JenkinsJobStatus, \"defaultProps\", {\n  interval: 1000 * 60 * 5,\n  title: 'Job Status'\n});","map":{"version":3,"sources":["C:/Users/u061717/Documents/Next/dashboard-master/components/widgets/jenkins/job-status.js"],"names":["Component","fetch","styled","object","string","array","number","Widget","Table","Th","Td","Badge","LoadingIndicator","basicAuthHeader","jenkinsBadgeColor","theme","status","palette","errorColor","warnColor","successColor","disabledColor","JenkinsBadge","schema","shape","url","required","jobs","label","path","branch","interval","title","authKey","JenkinsJobStatus","loading","error","componentDidMount","validate","props","then","fetchInformation","catch","err","console","name","constructor","errors","setState","componentWillUnmount","clearTimeout","timeout","opts","headers","builds","Promise","all","map","job","res","json","result","setTimeout","render","state","build"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport styled from 'styled-components'\nimport { object, string, array, number } from 'yup'\nimport Widget from '../../widget'\nimport Table, { Th, Td } from '../../table'\nimport Badge from '../../badge'\nimport LoadingIndicator from '../../loading-indicator'\nimport { basicAuthHeader } from '../../../lib/auth'\n\nconst jenkinsBadgeColor = ({ theme, status }) => {\n  switch (status) {\n    case 'FAILURE':\n      return theme.palette.errorColor\n    case 'UNSTABLE':\n      return theme.palette.warnColor\n    case 'SUCCESS':\n      return theme.palette.successColor\n    case 'ABORTED':\n    case 'NOT_BUILT':\n      return theme.palette.disabledColor\n    default: // null = 'In Progress'\n      return 'transparent'\n  }\n}\nconst JenkinsBadge = styled(Badge)`\n  background-color: ${jenkinsBadgeColor};\n`\n\nconst schema = object().shape({\n  url: string().url().required(),\n  jobs: array(object({\n    label: string().required(),\n    path: string().required(),\n    branch: string()\n  })).required(),\n  interval: number(),\n  title: string(),\n  authKey: string()\n})\n\nexport default class JenkinsJobStatus extends Component {\n  static defaultProps = {\n    interval: 1000 * 60 * 5,\n    title: 'Job Status'\n  }\n\n  state = {\n    loading: true,\n    error: false\n  }\n\n  componentDidMount () {\n    schema.validate(this.props)\n      .then(() => this.fetchInformation())\n      .catch((err) => {\n        console.error(`${err.name} @ ${this.constructor.name}`, err.errors)\n        this.setState({ error: true, loading: false })\n      })\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this.timeout)\n  }\n\n  async fetchInformation () {\n    const { authKey, jobs, url } = this.props\n    const opts = authKey ? { headers: basicAuthHeader(authKey) } : {}\n\n    try {\n      const builds = await Promise.all(\n        jobs.map(async job => {\n          const branch = job.branch ? `job/${job.branch}/` : ''\n          const res = await fetch(`${url}/job/${job.path}/${branch}lastBuild/api/json`, opts)\n          const json = await res.json()\n\n          return {\n            name: job.label,\n            url: json.url,\n            result: json.result\n          }\n        })\n      )\n\n      this.setState({ error: false, loading: false, builds })\n    } catch (error) {\n      this.setState({ error: true, loading: false })\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval)\n    }\n  }\n\n  render () {\n    const { loading, error, builds } = this.state\n    const { title } = this.props\n\n    return (\n      <Widget title={title} error={error} loading={loading}>\n        <Table>\n          <tbody>\n            {builds && builds.map(build => (\n              <tr key={`jenkins-${build.name}`}>\n                <Th>{build.name}</Th>\n                <Td>\n                  <a href={build.url} title={build.result}>\n                    {\n                      build.result\n                        ? <JenkinsBadge status={build.result} />\n                        : <LoadingIndicator size='small' />\n                    }\n                  </a>\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Widget>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}