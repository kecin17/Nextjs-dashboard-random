{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\u061717\\\\Documents\\\\Next\\\\dashboard-master\\\\components\\\\widgets\\\\bitbucket\\\\pull-request-count.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { object, string, number, array } from 'yup';\nimport Widget from '../../widget';\nimport Counter from '../../counter';\nimport { basicAuthHeader } from '../../../lib/auth';\nconst schema = object().shape({\n  url: string().url().required(),\n  project: string().required(),\n  repository: string().required(),\n  interval: number(),\n  title: string(),\n  users: array().of(string()),\n  authKey: string()\n});\nexport default class BitbucketPullRequestCount extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      count: 0,\n      error: false,\n      loading: true\n    });\n  }\n\n  componentDidMount() {\n    schema.validate(this.props).then(() => this.fetchInformation()).catch(err => {\n      console.error(`${err.name} @ ${this.constructor.name}`, err.errors);\n      this.setState({\n        error: true,\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  async fetchInformation() {\n    const {\n      authKey,\n      url,\n      project,\n      repository,\n      users\n    } = this.props;\n    const opts = authKey ? {\n      headers: basicAuthHeader(authKey)\n    } : {};\n\n    try {\n      const res = await fetch(`${url}/rest/api/1.0/projects/${project}/repos/${repository}/pull-requests?limit=100`, opts);\n      const json = await res.json();\n      let count;\n\n      if (users.length) {\n        count = json.values.filter(el => users.includes(el.user.slug)).length;\n      } else {\n        count = json.size;\n      }\n\n      this.setState({\n        count,\n        error: false,\n        loading: false\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval);\n    }\n  }\n\n  render() {\n    const {\n      count,\n      error,\n      loading\n    } = this.state;\n    const {\n      title\n    } = this.props;\n    return __jsx(Widget, {\n      title: title,\n      loading: loading,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, __jsx(Counter, {\n      value: count,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(BitbucketPullRequestCount, \"defaultProps\", {\n  interval: 1000 * 60 * 5,\n  title: 'Bitbucket PR Count',\n  users: []\n});","map":{"version":3,"sources":["C:/Users/u061717/Documents/Next/dashboard-master/components/widgets/bitbucket/pull-request-count.js"],"names":["Component","fetch","object","string","number","array","Widget","Counter","basicAuthHeader","schema","shape","url","required","project","repository","interval","title","users","of","authKey","BitbucketPullRequestCount","count","error","loading","componentDidMount","validate","props","then","fetchInformation","catch","err","console","name","constructor","errors","setState","componentWillUnmount","clearTimeout","timeout","opts","headers","res","json","length","values","filter","el","includes","user","slug","size","setTimeout","render","state"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport { object, string, number, array } from 'yup'\nimport Widget from '../../widget'\nimport Counter from '../../counter'\nimport { basicAuthHeader } from '../../../lib/auth'\n\nconst schema = object().shape({\n  url: string().url().required(),\n  project: string().required(),\n  repository: string().required(),\n  interval: number(),\n  title: string(),\n  users: array().of(string()),\n  authKey: string()\n})\n\nexport default class BitbucketPullRequestCount extends Component {\n  static defaultProps = {\n    interval: 1000 * 60 * 5,\n    title: 'Bitbucket PR Count',\n    users: []\n  }\n\n  state = {\n    count: 0,\n    error: false,\n    loading: true\n  }\n\n  componentDidMount () {\n    schema.validate(this.props)\n      .then(() => this.fetchInformation())\n      .catch((err) => {\n        console.error(`${err.name} @ ${this.constructor.name}`, err.errors)\n        this.setState({ error: true, loading: false })\n      })\n  }\n\n  componentWillUnmount () {\n    clearTimeout(this.timeout)\n  }\n\n  async fetchInformation () {\n    const { authKey, url, project, repository, users } = this.props\n    const opts = authKey ? { headers: basicAuthHeader(authKey) } : {}\n\n    try {\n      const res = await fetch(`${url}/rest/api/1.0/projects/${project}/repos/${repository}/pull-requests?limit=100`, opts)\n      const json = await res.json()\n\n      let count\n      if (users.length) {\n        count = json.values.filter((el) => users.includes(el.user.slug)).length\n      } else {\n        count = json.size\n      }\n\n      this.setState({ count, error: false, loading: false })\n    } catch (error) {\n      this.setState({ error: true, loading: false })\n    } finally {\n      this.timeout = setTimeout(() => this.fetchInformation(), this.props.interval)\n    }\n  }\n\n  render () {\n    const { count, error, loading } = this.state\n    const { title } = this.props\n    return (\n      <Widget title={title} loading={loading} error={error}>\n        <Counter value={count} />\n      </Widget>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}